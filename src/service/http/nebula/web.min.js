import{neb}from"./dist/web/main2.js";import{Nebula,count,sum,min,max,avg,tree,p10,p25,p50,p75,p90,p99,p99_9,p99_99,and,or,eq,neq,gt,lt,like,ilike}from"./__/sdk.js";import{Constraints}from"../c/constraints.min.js";import{Charts}from"./c/charts2.min.js";const time=neb.time,$$=e=>$(e).val();let json=[],fpcs,fpce;const timeCol="_time_",windowCol="_window_",charts=new Charts,nebula=new Nebula,formatTime=charts.formatTime,chartId="#show",fieldsId="fields",fieldsRef=`#${fieldsId}`,tablesId="#tables",startId="#start",endId="#end",displayId="#display",NoRollup=-1,msg=text=>$("#qr").text(text),FETCH_OPT={method:"GET"};let filters,$sdc=null;const field=(c,m)=>{const valid=m in neb.Rollup;return{M:valid?neb.Rollup[m]:NoRollup,C:c,T:valid?`${m.toLowerCase()}(${c})`:c}},makeCalendar=(obj,id,btn,def,min,max)=>{obj=$(id).flatpickr({enableTime:!0,allowInput:!0,clickOpens:!1,dateFormat:"Y-m-d H:i:S",defaultDate:def,minDate:min,maxDate:max,allowInvalidPreload:!0}),$(btn).on("click",()=>{setTimeout(()=>{obj.open()},0)})},onTableState=(state,stats,callback)=>{const bc=state.bc,rc=Math.round(state.rc/1e4)/100,ms=Math.round(state.ms/1e7)/100,mints=formatTime(1e3*state.mt),maxts=formatTime(1e3*state.xt+1);stats.text(`[Blocks: ${bc}, Rows: ${rc}M, Mem: ${ms}GB, Min T: ${mints}, Max T: ${maxts}]`),makeCalendar(fpcs,startId,"#startc",mints,mints,maxts),makeCalendar(fpce,endId,"#endc",maxts,mints,maxts);const strColumns=(state.dl||[]).filter(v=>v!==timeCol),numColumns=(state.ml||[]).filter(v=>v!==timeCol),allColumns=strColumns.concat(numColumns),all=[];allColumns.map(e=>all.push(field(e)));for(let r in neb.Rollup){if("COUNT"===r){all.push(field(all[0].C,r));continue}let targetColumns=numColumns;"TREEMERGE"===r&&(targetColumns=strColumns),targetColumns.map(e=>all.push(field(e,r)))}$("#dwrapper").html(`<select id="${fieldsId}" multiple></select>`);const ef=$(fieldsRef).html("");all.forEach(d=>{$("<option/>").appendTo(ef).text(d.T).val(`${JSON.stringify(d)}`)}),$sdc=ef.selectize({plugins:["restore_on_backspace","remove_button"],persist:!1}),$(displayId).html(""),Object.keys(neb.DisplayType).forEach(k=>{$("<option/>").appendTo($(displayId)).text(k.toLowerCase()).val(neb.DisplayType[k])}),$("#ob").html(""),Object.keys(neb.OrderType).forEach(k=>{$("<option/>").appendTo($("#ob")).text(k.toLowerCase()).val(neb.OrderType[k])}),callback&&callback(allColumns)},initTable=(table,callback)=>{const stats=$("#stats");fetch(`/?api=state&start=0&end=0&table=${encodeURIComponent(table)}`,FETCH_OPT).then(response=>response.json()).then(data=>onTableState(data,stats,callback)).catch(err=>stats.text("Error: "+err))},checkRequest=state=>{if(!state.start||!state.end)return!0;const display=state.display;if(display==neb.DisplayType.TIMELINE){const windowSize=state.window;if(windowSize>0){const rangeSeconds=(state.end-state.start)/1e3,buckets=rangeSeconds/windowSize;if(buckets>1e3)return msg(`Too many data points to return ${buckets}, please increase window granularity.`),!0}}return display==neb.DisplayType.SAMPLES&&0==state.keys.length&&(msg("Please specify dimensions for samples"),!0)},hash=v=>(v&&(window.location.hash=v),window.location.hash),build=s=>{s&&$(displayId).val(s.display);const keys=[],metrics=[];$$(fieldsRef).map(e=>{const f=JSON.parse(e);f.M===NoRollup?keys.push(f.C):metrics.push(f)});const state=s||{table:$$(tablesId),start:$$(startId),end:$$(endId),filter:filters.expr(),keys:keys,window:$$("#window"),display:$$(displayId),metrics:metrics,sort:$$("#ob"),limit:$$("#limit")};state.start&&state.end?hash("#"+encodeURIComponent(JSON.stringify(state))):msg("Error: please enter start and end time")};let timer=null,timer2=null;const clsTimer=()=>{timer&&clearInterval(timer),timer2&&clearTimeout(timer2)},restore=()=>{clsTimer();const state=url2state(),set=(N,V)=>{V&&$(N).val(V)};let table=state.table,found=!1,first=null;$(`${tablesId} option`).each((t,v)=>{first=first||v.value,v.value===table&&(found=!0)}),found||(timer=animate(`preparing table ${table} `),timer2=setTimeout(()=>{location.reload()},3e3),table=first),table&&(set(tablesId,table),initTable(table,cols=>{set(startId,state.start),set(endId,state.end),set("#window",state.window),set(displayId,state.display),set("#ob",state.sort),set("#limit",state.limit);const fields=[];(state.keys||[]).map(e=>fields.push(JSON.stringify(field(e)))),(state.metrics||[]).map(e=>fields.push(JSON.stringify(e))),$sdc&&fields.length>0&&$sdc[0].selectize.setValue(fields);const om={EQ:"=",NEQ:"!=",MORE:">",LESS:"<",LIKE:"like",ILIKE:"ilike"},ops={};for(var k in neb.Operation)ops[neb.Operation[k]]=om[k];filters=new Constraints(!1,"filters",cols,ops,state.filter),state.code&&state.code.length>0&&editor.getValue()!=state.code&&(editor.setValue(state.code),ide()),execute(state)}))},onQueryResult=(state,r)=>{if(r.error)return void msg(`[query: error=${r.error}, latency=${r.duration} ms]`);if(msg(`[query: latency=${r.duration}ms, scan=${r.rows_scan}, blocks=${r.blocks_scan}, rows=${r.rows_ret}]`),json=JSON.parse(atob(r.data)),$("#table_head").html(""),$("#table_content").html(""),0==json.length)return void $("#show").html("<b>NO RESULTS.</b>");const draw=()=>{const display=+state.display;if(display!=+$$(displayId))return;if(display==neb.DisplayType.SAMPLES||display==neb.DisplayType.TABLE)return void charts.displayTable(chartId,json);const keys=state.keys.slice(),data=json.slice(),metrics=[];for(const key in data[0])keys.includes(key)||key==timeCol||key==windowCol||metrics.push(key);if(keys.length>1){const con=" - ",combinedCol=keys.join(con);data.forEach(row=>{row[combinedCol]=keys.map(e=>row[e]).join(con)}),keys.length=0,keys.push(combinedCol)}let err=null;switch(display){case neb.DisplayType.TIMELINE:const beginMs=1e3*time.seconds(state.start);err=charts.displayTimeline(chartId,data,keys,metrics,windowCol,beginMs);break;case neb.DisplayType.BAR:err=charts.displayBar(chartId,data,keys,metrics);break;case neb.DisplayType.PIE:err=charts.displayPie(chartId,data,keys,metrics);break;case neb.DisplayType.LINE:err=charts.displayLine(chartId,data,keys,metrics);break;case neb.DisplayType.FLAME:err=charts.displayFlame(chartId,data,keys,metrics)}err&&msg(`Error: ${err}`)};draw();var resizeTimer=void 0;$(window).on("resize",()=>{clearTimeout(resizeTimer),resizeTimer=setTimeout(draw,200)})},url2state=()=>{const input=decodeURIComponent((hash()||`#${$$(tablesId)}`).substr(1));let state={table:input};try{state=JSON.parse(input)}catch{}return state};let dots=0;const animate=(prefix,interval)=>setInterval(()=>{dots=(dots+1)%50,msg(`${prefix}${".".repeat(dots)}`)},interval||200),execute=state=>{state||(state=url2state()),checkRequest(state)||(timer=animate("soaring in nebula "),fetch(`/?api=query&start=0&end=0&query=${encodeURIComponent(JSON.stringify(state))}`,FETCH_OPT).then(response=>response.json()).then(data=>{clsTimer(),onQueryResult(state,data)}).catch(err=>{clsTimer(),msg(`Error: ${err}`)}))};$("#soar").on("click",e=>build()),$("#share").on("click",()=>{const path=location.href.substr(location.origin.length);fetch(`/?api=url&url=${encodeURIComponent(path)}`,FETCH_OPT).then(response=>response.json()).then(data=>{data.code&&data.code.length>4&&msg(`[query url: ${location.origin}/n/${data.code}]`)}).catch(err=>{msg(`Error: ${err}`)})});const editor=CodeMirror.fromTextArea($("#code").get(0),{lineNumbers:!1,lineWrapping:!0,styleActiveLine:!0,matchBrackets:!0,mode:"javascript",theme:"dracula"}),ide=()=>{const c_on="tap-on",c_off="tap-off",on=$(".tap-on"),off=$(".tap-off");on.removeClass(c_on).addClass(c_off),off.removeClass(c_off).addClass(c_on),setTimeout(()=>editor.refresh(),5)};$("#ui").on("click",ide);const exec=()=>{const code=editor.getValue();nebula.reset();try{eval(code)}catch(e){return void msg(`Code Error: ${e.message}`)}const error=nebula.validate();if(error)return void msg(`Validation Error: ${error}`);const state=nebula.build();state.code=code,build(state)};$("#exec").on("click",exec),window.onhashchange=function(){restore()};const onTableList=tables=>{if(tables&&tables.length>0)return tables.sort().forEach(t=>$("<option/>").appendTo($(tablesId)).text(t).val(t)),void restore();msg("Nebula is down: can not fetch tables")};$(()=>{const stats=$("#stats");fetch("/?api=tables&start=0&end=0",FETCH_OPT).then(response=>response.json()).then(data=>{onTableList(data)}).catch(err=>{stats.text("Error: "+err)}),$(tablesId).change(()=>{hash($(tablesId).val()),restore()}),fetch("/?api=user",FETCH_OPT).then(response=>response.json()).then(data=>{$("#user").text(data.auth?data.user:"unauth")})});