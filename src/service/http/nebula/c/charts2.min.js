import{neb}from"../dist/web/main2.js";import{Flame}from"./flame.min.js";const Chart=neb.cj.Chart,pad2=v=>`${v}`.padStart(2,0),isTime=c=>"_time_"===c;export class Charts{constructor(){this.id="viz",this.chart=null,this.cls=chartId=>$(chartId).html(`<canvas id='${this.id}' height='100pt'/>`),this.formatTime=unix_ms=>{const date=new Date(unix_ms),y=date.getUTCFullYear(),m=pad2(date.getUTCMonth()+1),d=pad2(date.getUTCDate()),h=pad2(date.getUTCHours()),mi=pad2(date.getUTCMinutes()),s=pad2(date.getUTCSeconds());return`${y}-${m}-${d} ${h}:${mi}:${s}`},this.displayTable=(chartId,json)=>{if(json.length>0){const area=$(chartId);area.html("");const tb=$("<table/>").appendTo(area),head=$("<tr/>").appendTo($("<thead/>").appendTo(tb)),content=$("<tbody/>").appendTo(tb),keys=Object.keys(json[0]),width=Math.round(100/keys.length);keys.forEach(k=>$("<th/>").appendTo(head).attr("width",`${width}%`).text(isTime(k)?"[time]":k)),json.forEach(row=>{const r=$("<tr/>").appendTo(content);keys.forEach(k=>{const v=row[k];$("<td/>").appendTo(r).text(isTime(k)?this.formatTime(1e3*v):v)})})}},this.color=index=>{const palette=["rgba(224, 170, 255, 0.9)","rgba(199, 125, 255, 0.85)","rgba(157, 78, 221, 0.8)","rgba(123, 44, 191, 0.75)","rgba(90, 24, 154, 0.7)","rgba(60, 9, 108, 0.65)","rgba(36, 0, 70, 0.6)","rgba(16, 0, 43, 0.55)"];return palette[(index+index%3)%palette.length]},this.colorize=(op,ctx)=>this.color(ctx.dataIndex),this.hyphen=" - ",this.label=(row,keys)=>{const kv=[];return keys.forEach(k=>{kv.push(`${row[k]}`)}),kv.join(this.hyphen)},this.process=(json,keys,metrics,x,xf)=>{let genLabel=row=>this.label(row,keys),genSeries=row=>"",desc=keys.length>0?`metrics by ${keys.join(this.hyphen)}`:null;x&&(desc=`metrics by ${x}`,genSeries=genLabel,genLabel=row=>xf(row[x]));const align=(vector,size,filling)=>{const val=filling||0;for(;vector.length<size;)vector.push(val)},buckets=[],set={},genSet=row=>{const x=genLabel(row);let index=buckets.indexOf(x);-1==index&&(index=buckets.length,buckets.push(x));const name=genSeries(row),series=name?[name]:metrics;for(var i=0;i<series.length;++i){const s=series[i];s in set||(set[s]=[]);const data=set[s];align(data,index+1),data[index]=+row[metrics[i]]}};json.forEach(row=>genSet(row));for(const key in set){const vector=set[key];align(vector,buckets.length)}return{title:desc,labels:buckets,series:set}},this.options=model=>{const opts={responsive:!0,title:{display:model.title,text:model.title},legend:{display:!0,labels:{fontColor:"rgba(147, 112, 219, 0.75)"}},tooltips:{callbacks:{label:(item,data)=>{const ds=data.datasets[item.datasetIndex];var label=ds.label||"";label&&(label+=": ");const val=`${ds.data[item.index]}`;if(label+=val,model.pct){var total=ds.data.reduce((prev,cur,curIdx,arr)=>prev+cur);label+=`, ${Math.floor(val/total*100+.5)}%`}return label}}},scales:{yAxes:[{ticks:{beginAtZero:!0}}]}};return"pie"!==model.type&&"doughnut"!==model.type||(opts.scales.yAxes=[]),model.xtime&&(opts.scales.xAxes=[{type:"time",ticks:{autoSkip:!0,maxTicksLimit:20,maxRotation:0,minRotation:0},time:{displayFormats:{millisecond:"MMM DD",second:"MMM DD",minute:"MMM DD",hour:"MMM DD",day:"MMM DD",week:"MMM DD",month:"MMM DD",quarter:"MMM DD",year:"MMM DD"}}}]),opts},this.displayGeneric=(chartId,model)=>{const dataset={labels:model.labels,datasets:[]};let idx=0;for(const name in model.series)dataset.datasets.push({label:name,backgroundColor:this.color(idx++),data:model.series[name]});this.chart&&this.chart.destroy(),this.chart=new Chart(chartId,{type:model.type,data:dataset,options:this.options(model)})},this.displayBar=(chartId,json,keys,metrics)=>{this.cls(chartId);const model=this.process(json,keys,metrics);model.type="bar",this.displayGeneric(this.id,model)},this.displayLine=(chartId,json,keys,metrics)=>{this.cls(chartId);const model=this.process(json,keys,metrics);model.type="line",this.displayGeneric(this.id,model)},this.displayPie=(chartId,json,keys,metrics)=>{this.cls(chartId);const model=this.process(json,keys,metrics);model.pct=!0,model.type="pie",this.displayGeneric(this.id,model)},this.displayTimeline=(chartId,json,keys,metrics,timeCol,start)=>{this.cls(chartId);const model=this.process(json,keys,metrics,timeCol,x=>this.formatTime(1e3*x+start));model.xtime=!0,model.type="line",this.displayGeneric(this.id,model)},this.displayFlame=(chartId,json,keys,metrics)=>{if(1!==metrics.length||!metrics[0].endsWith(".TREEMERGE"))return"Flame view supports only single metric resulting by treemerge function";const area=$(chartId);area.html("");let i=0;json.forEach(row=>{const title=this.label(row,keys),stack=row[metrics[0]],id=`fg_${i++}`;area.append(`<center>${title}</center>`),area.append(`<canvas id='${id}' width='${area.width()}'/>`),new Flame(id,JSON.parse(stack))})}}}