/*
 * Copyright 2017-present Shawn Cao
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

package nebula.service;

// The greeting service definition.
service Echo {
  // Sends a greeting
  rpc EchoBack(EchoRequest) returns(EchoResponse) {}
}

// The request message containing the user's name.
message EchoRequest {
  string name = 1;
}

// The response message containing the greetings
message EchoResponse {
  string message = 1;
}

// all service methods are captilized compared to other regular methods
service V1 {
  // Get all available data sources
  rpc Tables(ListTables) returns(TableList) {}
  // Get table state for given table
  rpc State(TableStateRequest) returns(TableStateResponse) {}
  // Query Nebula to get result
  rpc Query(QueryRequest) returns(QueryResponse) {}
  // on demand loading specified data with parameters
  // template defined in cluster configuration
  rpc Load(LoadRequest) returns(LoadResponse) {}
  // shut down all work nodes - used for perf profiling
  rpc Nuclear(EchoRequest) returns(EchoResponse) {}
}

message TableStateRequest {
  string table = 1;
}

message ListTables {
  uint32 limit = 1;
}

message TableList {
  repeated string table = 1;
}

message TableStateResponse {
  int32 blockCount = 1;
  int64 rowCount = 2;
  int64 memSize = 3;
  uint64 minTime = 4;
  uint64 maxTime = 5;

  // columns = dimension columns + metric columns
  // metric column are column with number types, others are dimension columns
  repeated string dimension = 6;
  repeated string metric = 7;
}

// define query request and response

// single predicate which is column op [list of values]
// Operation defines comparions op to form a predicate: =, !=, >, <
enum Operation {
  EQ = 0;
  NEQ = 1;
  MORE = 2;
  LESS = 3;
  LIKE = 4;
  ILIKE = 5;
}

// TODO(cao): reference Constraints.js for GROUP/RULE generation to build predicates tree
// Current definition only supports one group basically. (nested groups)
// NOTE - based on the code generation rule, we don't put plural term for repeated field
// so the method will like add_value rather than add_values
// Based on column type - the value will be converted from string always
message Predicate {
  string column = 1;
  Operation op = 2;
  repeated string value = 3;
}

// define filter - a filter is formed by a list of predicates combined by AND or OR
message PredicateAnd {
  repeated Predicate expression = 1;
}

message PredicateOr {
  repeated Predicate expression = 1;
}


// This defines all the aggregate metric methods suppored in nebula
// 
enum Rollup {
  SUM = 0;
  COUNT = 1;
  MAX = 2;
  MIN = 3;
  AVG = 4;
  // pre-defined percentile
  P10 = 5;
  P25 = 6;
  P50 = 7;
  P75 = 8;
  P90 = 9;
  P99 = 10;
  P99_9 = 11;
  P99_99 = 12;
  // call stack merge
  TREEMERGE = 13;
}

// A metric is defined by rollup method on a column
message Metric {
  string column = 1;
  Rollup method = 2;
}

// define ordering spec - limiting to order by single column in returning result
// NOTE: grpc-web plugin has some issue to generate missing function for bool type
enum OrderType {
  ASC = 0;
  DESC = 1;
  NONE = 2;
}

message Order {
  string column = 1;
  OrderType type = 2;
}

// display type of the result data set in client side
// This may or may not be used by server
// It is optional for potential optimization
enum DisplayType {
  SAMPLES = 0;
  TABLE = 1;
  TIMELINE = 2;
  BAR = 3;
  PIE = 4;
  LINE = 5;
  FLAME = 6;
}

// define supported custom column type which is a sub set of nebula types
enum CustomType {
  INT = 0;
  LONG = 1;
  FLOAT = 2;
  DOUBLE = 3;
  STRING = 4;
}

// define custom column described by a script
message CustomColumn {
  string column = 1;
  CustomType type = 2;
  string expr = 3;
}

// define query request 
message QueryRequest {
  string table = 1;

  // at the top tree as filter - it can be only one, either AND or OR
  oneof filter {
    PredicateAnd filterA = 2;
    PredicateOr filterO = 3;
  }

  // every query will specify time range for the data to query - this is enforced
  // start time and end time are unix timestamp with GMT timezone - no delta
  // time range filter will be inclusive on both ends as [start, end]
  uint64 start = 4;
  uint64 end = 5;

  // window size is used in time serials query that aggregate timestamp into a window as bucket
  // this is in seconds (if the value is 60 -> one minute)
  uint32 window = 6;

  // dimensions (key columns / group by columns) to pull metrics for
  repeated string dimension = 7;

  // metric list, such as sum(col_a), count(col_b)
  repeated Metric metric = 8;

  // usually query only takes top X results based on order spec
  uint32 top = 9;

  // define order spec
  Order order = 10;

  // display type for query result
  DisplayType display = 11;

  // custom column list
  repeated CustomColumn custom = 12;
}

// define query processing metrics
message Statistics {
  // total rows scanned for the query
  uint64 rowsScanned = 1;
  // end to end query time in milliseconds
  uint32 queryTimeMs = 2;
  // query result - 0=success, other error code to look up
  uint32 error = 3;
  // may place error message here if failed
  string message = 4;
}

enum DataType {
  // use native flat buffer format 
  // it has its own serialziation and deserialization logic
  NATIVE = 0;
  // JSON string sending in bytes buffer
  JSON = 1;
}

// define query response from server
message QueryResponse {
  Statistics stats = 1;
  DataType type = 2;
  bytes data = 3;
}

// on-demand data loading request
message LoadRequest {
  // template table name
  string table = 1;
  // parameters to instantiate template
  string paramsJson = 2;
  // TTL in seconds for the data to live
  uint32 ttl = 3;
}

// load error
enum LoadError {
  SUCCESS = 0;
  TEMPLATE_NOT_FOUND = 1;
  MISSING_PARAM = 2;
  MISSING_BUCKET_VALUE = 3;
}

// load command response
message LoadResponse {
  // load state: error=0 indicating success‚àè
  LoadError error = 1;
  // loading time in milliseconds
  uint32 loadTimeMs = 2;
  // loaded instance table name
  string table = 3;
  // extra message the server wants to share
  string message = 4;
}